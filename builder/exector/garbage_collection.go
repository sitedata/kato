// Copyright (C) 2021 Gridworkz Co., Ltd.
// KATO, Application Management Platform

// Permission is hereby granted, free of charge, to any person obtaining a copy of this 
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
// to whom the Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all copies or 
// substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package exector

import (
	"fmt"
	"os"

	"github.com/gridworkz/kato/cmd/builder/option"
	eventutil "github.com/gridworkz/kato/eventlog/util"
	"github.com/pquerna/ffjson/ffjson"
	"github.com/sirupsen/logrus"
)

// GarbageCollectionItem -
type GarbageCollectionItem struct {
	TenantID  string        `json:"tenant_id"`
	ServiceID string        `json:"service_id"`
	EventIDs  []string      `json:"event_ids"`
	Cfg       option.Config `json:"-"`
}

// NewGarbageCollectionItem creates a new GarbageCollectionItem
func NewGarbageCollectionItem(cfg option.Config, in []byte) (*GarbageCollectionItem, error) {
	logrus.Debugf("garbage collection; request body: %v", string(in))
	var gci GarbageCollectionItem
	if err := ffjson.Unmarshal(in, &gci); err != nil {
		return nil, err
	}
	gci.Cfg = cfg
	// validate

	return &gci, nil
}

// delLogFile deletes persistent data related to the service based on serviceID.
func (g *GarbageCollectionItem) delLogFile() {
	logrus.Infof("service id: %s;delete log file.", g.ServiceID)
	// log generated during service running
	dockerLogPath := eventutil.DockerLogFilePath(g.Cfg.LogPath, g.ServiceID)
	if err := os.RemoveAll(dockerLogPath); err != nil {
		logrus.Warningf("remove docker log files: %v", err)
	}
	// log generated by the service event
	eventLogPath := eventutil.EventLogFilePath(g.Cfg.LogPath)
	for _, eventID := range g.EventIDs {
		eventLogFileName := eventutil.EventLogFileName(eventLogPath, eventID)
		logrus.Debugf("remove event log file: %s", eventLogFileName)
		if err := os.RemoveAll(eventLogFileName); err != nil {
			logrus.Warningf("file: %s; remove event log file: %v", eventLogFileName, err)
		}
	}
}

func (g *GarbageCollectionItem) delVolumeData() {
	logrus.Infof("service id: %s; delete volume data.", g.ServiceID)
	dir := fmt.Sprintf("/gradata/tenant/%s/service/%s", g.TenantID, g.ServiceID)
	if err := os.RemoveAll(dir); err != nil {
		logrus.Warningf("dir: %s; remove volume data: %v", dir, err)
	}
}
